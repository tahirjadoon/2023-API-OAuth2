using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using OAuth2.WebApi.Core.Entities;

namespace OAuth2.WebApi.Core.DB;

/// <summary>
/// DataContext Class, add as a service to program.cs
/// </summary>
//Change after identity implementation
//public class DataContext : DbContext
public class DataContext : IdentityDbContext<AppUser,
                                            AppRole,
                                            int,
                                            IdentityUserClaim<int>,
                                            AppUserRole,
                                            IdentityUserLogin<int>,
                                            IdentityRoleClaim<int>,
                                            IdentityUserToken<int>>
{
    public DataContext(DbContextOptions options) : base(options)
    {
    }

    //Removed after implementing Identity as not needed
    //public DbSet<AppUser> Users { get; set; }

    //we are not putting the DBSet for Photos
    //Photos will be pulled via Users
    //setup a relationships in photos and apply the Table attriute to it

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        //AppUser has guid that needs to be autogenerated for insert
        //This isn't working, in AppUser create the guid
        /*
        modelBuilder.Entity<AppUser>()
        .Property(x => x.Guid)
        .ValueGeneratedOnAdd();
        */

        //make DisplayName Unique
        modelBuilder.Entity<AppUser>(entity =>
        {
            entity.HasIndex(e => e.DisplayName).IsUnique();
        });

        //Due to use of Identity
        CreateUserRole(modelBuilder);
    }

    /// <summary>
    /// User roles due to use of Identity
    /// </summary>
    /// <param name="modelBuilder"></param>
    private void CreateUserRole(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AppUser>()
                .HasMany(ur => ur.UserRoles)
                .WithOne(u => u.User)
                .HasForeignKey(ur => ur.UserId)
                .IsRequired()
        ;

        modelBuilder.Entity<AppRole>()
                .HasMany(ur => ur.UserRoles)
                .WithOne(u => u.Role)
                .HasForeignKey(ur => ur.RoleId)
                .IsRequired()
        ;
    }
}
